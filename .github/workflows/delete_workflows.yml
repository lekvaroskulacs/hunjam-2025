name: Maintenance - Delete old workflow runs

on:
  workflow_dispatch:
    inputs:
      workflow:
        description: 'Workflow identifier: file path (.github/workflows/*.yml), numeric ID, or display name'
        required: false
        default: '.github/workflows/unity-webgl-ci.yml'
      keep:
        description: 'How many most-recent runs to keep'
        required: false
        default: '10'

permissions:
  actions: write
  contents: read

jobs:
  delete-old-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old runs (keep latest N)
        uses: actions/github-script@v7
        env:
          WF:   ${{ github.event.inputs.workflow || '.github/workflows/unity-webgl-ci.yml' }}
          KEEP: ${{ github.event.inputs.keep || '10' }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const keep = Math.max(parseInt(process.env.KEEP || '10', 10), 0);
            const wfInput = (process.env.WF || '.github/workflows/unity-webgl-ci.yml').trim();

            // Resolve workflow_id:
            let workflow_id = wfInput;
            const endsWithYaml = wfInput.endsWith('.yml') || wfInput.endsWith('.yaml');
            const numericId = /^\d+$/.test(wfInput);

            if (!endsWithYaml && !numericId) {
              core.info(`Looking up workflow by display name: "${wfInput}"`);
              const all = await github.paginate(github.rest.actions.listRepoWorkflows, {
                owner, repo, per_page: 100
              });
              const found = all.find(w => w.name === wfInput);
              if (!found) core.setFailed(`Could not find a workflow named "${wfInput}". Use the file path (e.g. ".github/workflows/unity-webgl-ci.yml") or the numeric ID.`);
              if (!found) return;
              workflow_id = found.id;
              core.info(`Resolved display name to workflow ID: ${workflow_id}`);
            } else if (endsWithYaml) {
              core.info(`Using workflow file: ${workflow_id}`);
            } else if (numericId) {
              core.info(`Using numeric workflow ID: ${workflow_id}`);
            }

            const allRuns = await github.paginate(
              github.rest.actions.listWorkflowRuns,
              { owner, repo, workflow_id, per_page: 100 }
            );

            core.info(`Found ${allRuns.length} runs. Keeping ${keep}.`);
            const toDelete = allRuns.slice(keep);
            let deleted = 0;
            for (const run of toDelete) {
              core.info(`üóëÔ∏è Deleting run ${run.id} (${run.name}) created at ${run.created_at}`);
              await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: run.id });
              deleted++;
            }
            core.info(`‚úÖ Done. Deleted ${deleted} runs, kept ${Math.min(keep, allRuns.length)}.`);
